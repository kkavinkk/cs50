#!/bin/bash

# Ensure correct usage
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <command> <test_set_file>" >&2
    exit 1
fi

command_to_run="$1"
test_set_file="$2"

# Check if test set file exists
if [ ! -f "$test_set_file" ]; then
    echo "Error: Test set file '$test_set_file' not found." >&2
    exit 1
fi

# Read each test case stem from the test set file
while IFS= read -r stem; do
    # Skip empty lines
    [[ -z "$stem" ]] && continue

    input_file="${stem}.in"
    output_file="${stem}.out"
    args_file="${stem}.args"
    temp_output=$(mktemp)

    # Check input and output files
    if [ ! -f "$input_file" ]; then
        echo "Error: Input file '$input_file' not found. Skipping test '$stem'."
        rm "$temp_output"
        continue
    fi

    if [ ! -f "$output_file" ]; then
        echo "Error: Expected output file '$output_file' not found. Skipping test '$stem'."
        rm "$temp_output"
        continue
    fi

    # Read arguments from .args file (if exists)
    if [ -f "$args_file" ]; then
        # Read all args preserving quoted strings (handles absolute/relative paths too)
        read -r -a args_array < "$args_file"
    else
        args_array=()
    fi

    # Run the command with args and input redirection
    "$command_to_run" "${args_array[@]}" < "$input_file" > "$temp_output"

    # Compare with expected output
    if diff -q "$temp_output" "$output_file" > /dev/null; then
        echo "Test $stem passed"
    else
        echo "Test $stem failed"
        echo "Expected output:"
        cat "$output_file"
        echo "Actual output:"
        cat "$temp_output"
    fi

    # Clean up temp output
    rm "$temp_output"

done < "$test_set_file"
